#!/bin/sh

# Default options with more permissive settings
AUTOMOUNT_OPTS_NTFS='rw,noatime,uid=1000,gid=1000,umask=000,dmask=000,fmask=000'
AUTOMOUNT_OPTS_EXT4='rw,noatime,exec'
AUTOMOUNT_OPTS='rw,noatime'

# Fixed mount point for RAW drives
FIXED_MOUNT_DIR="/media/RAW"

# Directory to look for type-specific settings
confdir=/etc/media-automount.d
mediadir=/media

[ $(id -u) != 0 ] && {
    echo "This tool requires root permissions"
    exit 1
}

log() {
    echo "$*" | systemd-cat -p ${loglevel:-info} -t "media-automount"
}
alias debuglog="loglevel=debug log"
alias errorlog="loglevel=err log"

# Find RAW labeled device
find_raw_device() {
    for device in $(find /dev -name 'sd[a-z][1-9]*' -o -name 'nvme[0-9]n[1-9]*'); do
        LABEL=$(blkid -po value -s LABEL "$device" 2>/dev/null)
        if [ "$LABEL" = "RAW" ]; then
            echo "$device"
            return 0
        fi
    done
    
    # If no labeled device found, try to find first available NVMe or USB drive
    for device in $(find /dev -name 'nvme[0-9]n1' -o -name 'sd[a-z]1'); do
        if [ -b "$device" ]; then
            echo "$device"
            return 0
        fi
    done
    
    return 1
}

# Find device
dev=$(find_raw_device)

if [ -z "$dev" ]; then
    errorlog "No suitable device found"
    exit 1
fi

debuglog "Processing device: $dev"

if ! [ -b "$dev" ]; then
    if grep /etc/mtab -qe "^$dev"; then
        log "$dev device removed, umounting"
        if ! umount "$dev"; then
            errorlog "Error umounting $dev errcode:$?"
            exit 1
        fi
    else
        errorlog "Device doesn't exist or is not a block device: $dev"
    fi
    exit 0
fi

eval $(blkid -po export "$dev")

debuglog "Device type: $TYPE"
debuglog "Device label: $LABEL"

if [ -z "$TYPE" ]; then
    debuglog "$dev has no known filesystem type, ignoring mount request"
    exit 0
fi

[ "$UUID" ] && fstab=$(grep /etc/fstab -e "^[^#]*${UUID}") || \
[ "$LABEL" ] && fstab=$(grep /etc/fstab -e "^[^#]*${LABEL}") || \
fstab=$(grep /etc/fstab -e "^[ \t]*$dev[ \t]")

if [ "$fstab" ]; then
    debuglog "$dev already in /etc/fstab, automount won't manage it"
    exit 0
fi

AUTOMOUNT_DIR="$FIXED_MOUNT_DIR"

mkdir -p "$AUTOMOUNT_DIR"

case "$TYPE" in
    "ntfs")
        MOUNT_OPTS="$AUTOMOUNT_OPTS_NTFS"
        ;;
    "ext4")
        MOUNT_OPTS="$AUTOMOUNT_OPTS_EXT4"
        ;;
    *)
        MOUNT_OPTS="$AUTOMOUNT_OPTS"
        ;;
esac

debuglog "Mounting $dev to $AUTOMOUNT_DIR with options: $MOUNT_OPTS"

if mount -t "$TYPE" -o "$MOUNT_OPTS" "$dev" "$AUTOMOUNT_DIR"; then
    # Set universal permissions
    chmod -R 777 "$AUTOMOUNT_DIR"
    chown -R root:root "$AUTOMOUNT_DIR"
    
    # Notify user
    username="$(ps au | awk '$11 ~ /^xinit/ { print $1; exit }')"
    [ "$username" ] && DISPLAY=:0 runuser -u "$username" xdg-open "$AUTOMOUNT_DIR"
    
    log "Device successfully mounted: $AUTOMOUNT_DIR"
    exit 0
else
    errorlog "Mount error: $?"
    errorlog "Command was: mount -t $TYPE -o $MOUNT_OPTS $dev $AUTOMOUNT_DIR"
    rmdir "$AUTOMOUNT_DIR"
    exit 1
fi


# #!/bin/sh
# #$1 = <dev>
# # Default options to use for mounting
# AUTOMOUNT_OPTS_NTFS='rw,noatime,uid=1000,gid=1000,umask=0022'
# AUTOMOUNT_OPTS_EXT4='rw,noatime,exec,acl'
# AUTOMOUNT_OPTS='rw,noatime'
# # Default type to use for mounting
# AUTOMOUNT_TYPE='auto'
# # Directory to look for type-specific settings
# confdir=/etc/media-automount.d
# # Directory to use as parent media dir for mountpoints
# mediadir=/media
# clipdir=/RAW
# [ $(id -u) != 0 ] && {
#  echo "This tool requires root permissions"
#  exit 1
# }
# log() {
#  echo "$*" | systemd-cat -p ${loglevel:-info} -t "media-automount"
# }
# alias debuglog="loglevel=debug log"
# alias errorlog="loglevel=err log"
# if ! [ "$1" ]
# then
#  errorlog "missing arguments! a device name must be provided"
#  exit 1
# else
#  dev=/dev/${1##*/}
# fi
# # Check if the device exists, if not but mounted, umount it
# if ! [ -b $dev ]
# then
# if grep /etc/mtab -qe "^$dev"
# then
#  log "$dev device removed, umounting and cleaning /media"
# if umount "$dev"
# then
#  exitcode=0
# else
#  exitcode=$?
#  errorlog "Error umounting $dev errcode:$exitcode"
#  errorlog "Command was: umount $dev"
# fi
# else
# # prevent it from failing on nonexistent devices and degrading systemctl boot
#  exitcode=0
#  errorlog "device doesn't exist anymore or is not a block device: $dev"
# fi
# # cleanup
# for dir in "$mediadir"/*
# do
# # Only clean non active mountpoints that have no /etc/fstab entry
# if [ -d "$dir" ] && ! mountpoint -q "$dir" && ! grep -q "^\s*[^#\s]\+\s\+${dir}" /etc/fstab; then
#  rmdir "$dir"
# fi
# done
#  exit $exitcode
# fi
# # Load additional info for the block device
# eval $(blkid -po export $dev)
# # Devices with unknown type will be ignored
# if [ -z "$TYPE" ]
# then
#  debuglog "$dev has no known filesystem type, ignoring mount request"
#  exit 0
# fi
# # Check /etc/fstab for an entry corresponding to the device
# [ "$UUID" ] && fstab=$(grep /etc/fstab -e "^[^#]*${UUID}") || \
# [ "$LABEL" ] && fstab=$(grep /etc/fstab -e "^[^#]*${LABEL}") || \
# fstab=$(grep /etc/fstab -e "^[ \t]*$dev[ \t]")
# # Don't manage devices that are already in fstab
# if [ "$fstab" ]
# then
#  debuglog "$dev already in /etc/fstab, automount won't manage it: ${fstab#\t}"
#  exit 0
# fi
# # directory name
# # AUTOMOUNT_DIR="${mediadir}/${LABEL:-${dev##*/}}.$TYPE"
# AUTOMOUNT_DIR="${mediadir}/RAW"
# # Avoid conflicts when multiple devices have the same label
# if [ -e "$AUTOMOUNT_DIR" ] && mountpoint -q "$AUTOMOUNT_DIR"
# then
#  dups=$(find "${AUTOMOUNT_DIR}*" -maxdepth 0 -printf '.' | wc -c)
#  AUTOMOUNT_DIR="${AUTOMOUNT_DIR}_$((dups+1))"
# fi
# # Load Filesystem-specific configuration for mounting
# if [ -e "$confdir/$TYPE" ]
# then
#  debuglog "loading configuration for fs type $TYPE"
#  . "$confdir/$TYPE"
# elif [ -e "$confdir/auto" ]
# then
#  . "$confdir/auto"
# fi
# log "mounting device $dev in $AUTOMOUNT_DIR"
# mkdir -p "$AUTOMOUNT_DIR"
# if [ "$TYPE" = "ntfs" ]; then
#  MOUNT_OPTS="$AUTOMOUNT_OPTS_NTFS"
# elif [ "$TYPE" = "ext4" ]; then
#  MOUNT_OPTS="$AUTOMOUNT_OPTS_EXT4"
# else
#  MOUNT_OPTS="$AUTOMOUNT_OPTS"
# fi
# if mount -t "$TYPE" -o "$MOUNT_OPTS" "$dev" "$AUTOMOUNT_DIR"; then
#  # Change ownership and permissions for ext4 filesystems after mounting
#  if [ "$TYPE" = "ext4" ]; then
#   chown root:pi "$AUTOMOUNT_DIR"
#   chmod 775 "$AUTOMOUNT_DIR"
#   setfacl -d -m g:pi:rwx "$AUTOMOUNT_DIR"
#  fi
#  # Notify
#  username="$(ps au | awk '$11 ~ /^xinit/ { print $1; exit }')"
#  [ "$username" ] && DISPLAY=:0 runuser -u "$username" xdg-open "$AUTOMOUNT_DIR"
#  log "Device successfully mounted: $AUTOMOUNT_DIR"
#  exit 0
# else
#  errorlog "Mount error: $?"
#  errorlog "Command was : mount -t $TYPE -o $MOUNT_OPTS $dev $AUTOMOUNT_DIR"
#  rmdir "$AUTOMOUNT_DIR"
#  exit 1
# fi